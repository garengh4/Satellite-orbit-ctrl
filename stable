%% ENGR 480 Satellite Orbit Project
% Last Update: December 1st, 2020
% Last Author: Garen Goh
%% Parameters
% *Notes:* x1= distance from earth; x2 = theta; x3 = dr/dt; x4 = d(theta)/dt
%
% Possible scaling problems due to units; Change m to km? s to hrs?

m_earth = 5.98e24;                   % kg
m_body = 100;                        % kg
r_earth = 6.37e6;                    % m 
height = 300e3;                      % m
G = 6.673e-11;                       % N*m^2 per kg^2
altitude = r_earth + height;
w = sqrt((G*m_earth)/(altitude^3));  % velocity of circular orbit
A = [0 0 1 0;0 0 0 1;3*(w^2) 0 0 2*altitude*w;0 0 -2*w/altitude 0];
B = [0 0;0, 0;1/m_body, 0;0 1/(m_body*altitude)];
C = [0 1 0 0];                       % controlling theta (input is 2 thrusters)
D = 0;
x0 = [r_earth+height -pi 0 0]';
%% Lab 2 - State-Space Modelling
% *Notes:* step/impulse function simulates to 10^5 seconds. 

% plotting untouched opensystem
opensys = ss(A,B,C,D);

figure(1);
subplot(2,1,1)
step(opensys)
subplot(2,1,2)
impulse(opensys)

% tracking x2(theta) to angle: 90 degrees
t = 0:1:1e6;
u = ones(size(t))*90;                  
u = [u;u]';
[y,t,x] = lsim(opensys,u,t,x0);

figure(2);
plot(t,x(:,2),'g--o',t,y,'--r',t,u);title(['attempt to track open sys to: 90' char(176)]);xlabel('seconds');ylabel('theta')
legend('input','output','track request');
% FAILURE: system does not care because impulse response goes to negative infinity

%% Lab 3 - System Quality
% *Notes:* system appears to be unstable so we got nothing for lyap

% controllability
P = ctrb(A,B);
if rank(P) >= length(A)
    disp('The system is controllable!');
else
    disp('The system is uncontrollable!');
end

% observability
Q = obsv(A,C);
if rank(Q) >= length(A)
    disp('The system is observable!');
else
    [Ahat,Bhat,Chat,T,k] = obsvf(A,B,C);
    q=sum(k);
    Ano=Ahat(1:length(A)-q,1:length(A)-q);
    dno = eig(Ano);
    is_detectable = all(real(dno) < 0);
    if is_detectable == 1
        disp("The system is unobservable but detectable.")
    else 
        disp("The system is unobservable and undetectable.")
    end    
end

% stability & stabilizabilty 
d = eig(A);
is_stable = all(real(d) < 0);
if is_stable == 1
    disp("The system is asymptotically stable, so it is stabilizable.")
else
    [Ahat,Bhat,Chat,T,k] = ctrbf(A,B,C);
    p=sum(k);
    Anc=Ahat(1:length(A)-p,1:length(A)-p);
    dnc = eig(Anc);
    is_stabilizable = all(real(dnc) < 0);
    if is_stabilizable == 1
        disp("The system is unstable but stabilizable.")
    else 
        disp("The system is unstable and unstabilizable.")
    end    
end

%% Lab 4 - Compensator
% *Notes:* Regulator brings everything to 0 regardless of C Matrix. Because gain_cl is unreasonably
% large (Line 136), tracking compensator is useless and will be ignored.

% ITAE: find eigenvalues and make to 4th order system
os = 0.1;
% ts = 2.606;                                                              % JORDAN
ts = 23;                                                                    % 2 <= ts < 24 in order to have resonable overshoot (see Fig.6)
% Tp = 1.5;
zeta = abs(log(os))/(sqrt(pi^2+log(os)^2));
wn = 4/(ts*zeta);
% wn = pi/(Tp*sqrt(1-zeta^2));
lambda1 = -zeta*wn + 1i*wn*(sqrt(1-zeta^2));
lambda2 = -zeta*wn - 1i*wn*(sqrt(1-zeta^2));
mu_c = [lambda1 lambda2 12*real(lambda1) 15*real(lambda1)];

t_op = 0:1:1e5;
t_cl = 0:1:20;
k = place(A,B,mu_c);
A_cl = A-B*k;
clsys = ss(A_cl,B,C,D);

u_reg_op = ones(size(B,2),length(t_op))*0;
u_reg_cl = ones(size(B,2),length(t_cl))*0;     

[yreg_op,t_op,xreg_op] = lsim(opensys,u_reg_op,t_op,x0);
[yreg_cl,t_cl,xreg_cl] = lsim(clsys,u_reg_cl,t_cl,x0);

% figure(3)
% sgtitle(['Fig. 1a: Regulator on Input;OS = ' num2str(os*100) '%, ts = ' num2str(ts) 's']);
% subplot(221)
% plot(t_op,xreg_op(:,1));title('OS: Altitude (m)');
% subplot(222)
% plot(t_cl,xreg_cl(:,1),'r');title('CS: Altitude (m)');
% subplot(223)
% plot(t_op,xreg_op(:,2));title('OS: theata (degrees)');
% subplot(224)
% plot(t_cl,xreg_cl(:,2),'r');title('CS: theta (degrees)');

% figure(4)
% sgtitle(['Fig. 1b: Regulator on Input;OS = ' num2str(os*100) '%, ts = ' num2str(ts) 's']);
% subplot(221)
% plot(t_op,xreg_op(:,3));title('OS: FallSpeed (m/s)');
% subplot(222)
% plot(t_cl,xreg_cl(:,3),'r');title('CS: FallSpeed (m/s)');
% subplot(223)
% plot(t_op,xreg_op(:,4));title('OS: theta rate ');
% subplot(224)
% plot(t_cl,xreg_cl(:,4),'r');title('CS: theta rate ');

% figure(4);
% subplot(211)
% plot(t_op,xreg_op(:,1),'--g',t_cl,xreg_cl(:,1));ylabel('angle');
% legend('OS input','CS input');
% subplot(212)
% plot(t_op,yreg_op(:,1),'--g',t_cl,yreg_cl(:,1));xlabel('seconds');ylabel('angle');
% legend('OS output','CS output');
% sgtitle('regulating output to 0')

figure(4);
plot(t_cl,xreg_cl(:,2));                                                     % CLOSED SYS GOES TO 0
xlabel('seconds');ylabel('angle');title('attempt to regulate closed system');
ylim([-3.5 0.5]);
figure(5);
plot(t_op,xreg_op(:,2));                                                     % OPEN SYS GOES TO INF; ignores being regulated
xlabel('seconds');ylabel('angle');title('attempt to regulate open system');
% figure(5)
% sgtitle(['Fig. 1c: Regulator to output;OS = ' num2str(os*100) '%, ts = ' num2str(ts) 's']);
% subplot(211)
% plot(t_op,yreg_op(:,1));title("OS: Angular Position");
% subplot(212)
% plot(t_cl,yreg_cl(:,1),'r');title("CS: Angular Position");

% Tracking to Angle: 180 degrees
usr_req = 180;
gain_cl = -pinv(C*(A_cl\B));                                               % DANGER: gain is unreasonable
disp(['Setting ts = ' num2str(ts) 's and os = ' num2str(os*100) '%'])
disp(['Tracking gain is: ' mat2str(gain_cl)])
% gain_op = -pinv(C*(A\B));                                                

u_track_op = ones(size(B,2),length(t_op))*usr_req;
u_track_cl = ones(size(B,2),length(t_cl))*usr_req;

[ytrack_op, t_op, xtrack_op] = lsim(opensys,u_track_op,t_op,x0);
[ytrack_cl, t_cl, xtrack_cl] = lsim(clsys,gain_cl.*u_track_cl,t_cl,x0);    % is there even a point for xtrack?

figure(6);
plot(t_cl,ytrack_cl(:,1));title('CS theta');
figure(7);
plot(t_op,ytrack_op(:,1));title('OS: theta');
figure(8);
plot(t_op,ytrack_op(:,1),t_cl,ytrack_cl(:,1));legend('OS','CS');title(['tracking to user request: ' num2str(usr_req) char(176)]);
xlabel('seconds');ylabel('angle');ylim([-20 200]);

figure(9);
subplot(211)
plot(t_op,xtrack_op(:,1),'--g',t_cl,xtrack_cl(:,1));ylabel('angle');
legend('OS input','CS input');
subplot(212)
plot(t_op,ytrack_op(:,1),'--g',t_cl,ytrack_cl(:,1));xlabel('seconds');ylabel('angle');
legend('OS output','CS output');
sgtitle('tracking to user req')

%% Lab 5 - Observer-based Compensator
% *Notes:* We will only be designing the regulator


% % observer-based regulator 2
% k = place(A,B,mu_c);
% Q = obsv(A,C);
% T_inv = [Q(1,:);0 1];
% T = inv(T_inv);
% A_unobs = TB1_T_inv*TB1_A*TB1_T;
% C_unobs = TB1_C*TB1_T;
% L_unobs = place(A_unobs(1,1)',C_unobs(1)',mu_o);
% 
% L = (T*[L_unobs; 0])';
% A_obscl = [A -B*k;L'*C A-B*k-L'*C];
% B_obscl = [B;B];
% C_obscl = [C zeros(size(C,1),length(A))];
% 
% obssys = ss(A_obscl,B_obscl,C_obscl,0);
% 
% obsu_reg = zeros(size(B,2),length(t));
% x0_hat = [0;0];
% TB1_t = 0:1:200;
% [TB1_yreg_op,TB1_t, TB1_xreg_op] = lsim(opensys,obsu_reg,TB1_t,x0);
% [TB1_yreg_cl,TB1_t, TB1_xreg_cl] = lsim(clsys,obsu_reg,TB1_t,x0);
% [TB1_yreg_obs_cl,TB1_t, TB1_xreg_obs_cl] = lsim(obssys,obsu_reg,TB1_t,[x0;x0_hat]); 

% % observer-based regulator 1
% mu_o = [-20 -21 -22 -23];
% L = place(A_cl',C',mu_c);
% A_obscl = [A -B*k;L'*C A-B*k-L'*C];                                         % k is obtained from closed system
% B_obscl = [B;B];
% C_obscl = [C zeros(1,length(A))];
% D_obscl = D;
% obssys = ss(A_obscl,B_obscl,C_obscl,D_obscl);
% u_reg_op = ones(size(B,2),length(t_op))*0;
% u_reg_cl = ones(size(B,2),length(t_cl))*0;
% u_reg_obs = ones(size(B,2),length(t_obs))*0;
% x0_hat = [0 0 0 0]';
% 
% [yreg_op, t_op, xreg_op] = lsim(opensys,u_reg_op,t_op,x0);
% [yreg_cl, t_cl, xreg_cl] = lsim(cl_sys,u_reg_cl,t_cl,x0);
% [yregobs_cl, t_obs, xregobs_cl] = lsim(obssys,u_reg_obs,t_obs,[x0;x0_hat]); 
% 
% figure(9);
% plot(t_op, yreg_op(:,1),'b',t_cl, yreg_cl(:,1),'r', t_obs, yregobs_cl(:,1), '--g');


L = place(A_cl',C',mu_c);                                                  % I can't seem to find proper values for mu_o...

A_obscl = [A -B*k; L'*C A-B*k-L'*C];
B_obscl = [B;B];
C_obscl = [C zeros(1,length(A))];
D_obscl = D;
obs_clsys = ss(A_obscl,B_obscl,C_obscl,D_obscl);


t_op = 0:1:1e5;
t_cl = 0:1:1e5;
t_obs = 0:1:1e5;
u_reg_op = ones(size(B,2),length(t_op))*0;
u_reg_cl = ones(size(B,2),length(t_cl))*0;
u_reg_obs = ones(size(B,2),length(t_obs))*0;
x0_hat = [0 0 0 0]';

[yreg_op, t_op, xreg_op] = lsim(opensys,u_reg_op,t_op,x0);
[yreg_cl, t_cl, xreg_cl] = lsim(clsys,u_reg_cl,t_cl,x0);
[yregobs_cl, t_obs, xregobs_cl] = lsim(obs_clsys,u_reg_obs,t_obs,[x0;x0_hat]); 

figure(10);
plot(t_op, yreg_op(:,1),'b',t_cl, yreg_cl(:,1),'r', t_obs, yregobs_cl(:,1),'--g');legend('open','closed','observer');







